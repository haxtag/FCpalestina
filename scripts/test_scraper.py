#!/usr/bin/env python3
"""
Script de test pour le scraper Yupoo
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from yupoo_scraper import YupooSpecializedScraper
import json

def test_scraper():
    """Tester le scraper avec des donn√©es de d√©monstration"""
    print("üß™ Test du Scraper Yupoo")
    print("=" * 30)
    
    # Cr√©er le scraper
    scraper = YupooSpecializedScraper()
    
    # Test 1: V√©rifier la configuration
    print("1. Test de configuration...")
    print(f"   Base URL: {scraper.base_url}")
    print(f"   User-Agent: {scraper.session.headers['User-Agent'][:50]}...")
    print("   ‚úÖ Configuration OK")
    
    # Test 2: Test de connexion
    print("\n2. Test de connexion...")
    try:
        soup = scraper.get_page(scraper.base_url)
        if soup:
            print("   ‚úÖ Connexion r√©ussie")
        else:
            print("   ‚ùå Connexion √©chou√©e")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
        return False
    
    # Test 3: Test d'extraction de liens
    print("\n3. Test d'extraction de liens...")
    try:
        albums_url = f"{scraper.base_url}/albums"
        soup = scraper.get_page(albums_url)
        if soup:
            links = scraper.find_album_links(soup)
            print(f"   ‚úÖ {len(links)} liens d'albums trouv√©s")
            if links:
                print(f"   Premier lien: {links[0]}")
        else:
            print("   ‚ùå Impossible de r√©cup√©rer la page des albums")
    except Exception as e:
        print(f"   ‚ùå Erreur extraction liens: {e}")
    
    # Test 4: Test d'extraction d'un album
    print("\n4. Test d'extraction d'album...")
    try:
        if links and len(links) > 0:
            album_url = links[0]
            album_soup = scraper.get_page(album_url)
            if album_soup:
                jersey = scraper.extract_jersey_data(album_url, album_soup)
                if jersey:
                    print(f"   ‚úÖ Maillot extrait: {jersey['title']}")
                    print(f"   üì∏ {len(jersey['images'])} images trouv√©es")
                    print(f"   üè∑Ô∏è  Cat√©gorie: {jersey['category']}")
                else:
                    print("   ‚ùå Impossible d'extraire les donn√©es du maillot")
            else:
                print("   ‚ùå Impossible de r√©cup√©rer l'album")
        else:
            print("   ‚ö†Ô∏è  Aucun lien d'album pour le test")
    except Exception as e:
        print(f"   ‚ùå Erreur extraction album: {e}")
    
    print("\nüéØ Test termin√© !")
    return True

def create_demo_data():
    """Cr√©er des donn√©es de d√©monstration si le scraping √©choue"""
    print("\nüìù Cr√©ation de donn√©es de d√©monstration...")
    
    demo_jerseys = [
        {
            "id": "demo-jersey-1",
            "title": "Maillot Domicile FC Palestina 2024",
            "description": "Maillot officiel domicile FC Palestina saison 2024. Couleurs traditionnelles avec design moderne.",
            "category": "home",
            "year": 2024,
            "price": 89.99,
            "images": [
                "jersey-home-2024-1.jpg",
                "jersey-home-2024-2.jpg",
                "jersey-home-2024-3.jpg"
            ],
            "thumbnail": "jersey-home-2024-1.jpg",
            "tags": ["domicile", "2024", "officiel", "moderne"],
            "date": "2024-01-15T10:30:00",
            "views": 1250,
            "featured": True,
            "source_url": "https://demo.yupoo.com/album1",
            "last_updated": "2024-01-15T10:30:00"
        },
        {
            "id": "demo-jersey-2",
            "title": "Maillot Ext√©rieur FC Palestina 2024",
            "description": "Maillot officiel ext√©rieur FC Palestina saison 2024. Design √©l√©gant pour les matchs √† l'ext√©rieur.",
            "category": "away",
            "year": 2024,
            "price": 89.99,
            "images": [
                "jersey-away-2024-1.jpg",
                "jersey-away-2024-2.jpg",
                "jersey-away-2024-3.jpg"
            ],
            "thumbnail": "jersey-away-2024-1.jpg",
            "tags": ["ext√©rieur", "2024", "officiel", "√©l√©gant"],
            "date": "2024-01-10T14:20:00",
            "views": 980,
            "featured": False,
            "source_url": "https://demo.yupoo.com/album2",
            "last_updated": "2024-01-10T14:20:00"
        },
        {
            "id": "demo-jersey-3",
            "title": "Maillot Sp√©cial Libert√© FC Palestina",
            "description": "Maillot sp√©cial √©dition limit√©e \"Libert√©\" avec design unique et message de solidarit√©.",
            "category": "special",
            "year": 2024,
            "price": 129.99,
            "images": [
                "jersey-special-2024-1.jpg",
                "jersey-special-2024-2.jpg",
                "jersey-special-2024-3.jpg"
            ],
            "thumbnail": "jersey-special-2024-1.jpg",
            "tags": ["sp√©cial", "libert√©", "√©dition limit√©e", "solidarit√©"],
            "date": "2024-02-01T09:15:00",
            "views": 2100,
            "featured": True,
            "source_url": "https://demo.yupoo.com/album3",
            "last_updated": "2024-02-01T09:15:00"
        }
    ]
    
    try:
        os.makedirs('data', exist_ok=True)
        with open('data/jerseys.json', 'w', encoding='utf-8') as f:
            json.dump(demo_jerseys, f, ensure_ascii=False, indent=2)
        
        print(f"   ‚úÖ {len(demo_jerseys)} maillots de d√©monstration cr√©√©s")
        print("   üìÅ Fichier: data/jerseys.json")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur cr√©ation donn√©es d√©mo: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test du Scraper Yupoo FC Palestina")
    print("=" * 50)
    
    # Demander le type de test
    print("Choisissez une option:")
    print("1. Test complet du scraper")
    print("2. Cr√©er des donn√©es de d√©monstration")
    print("3. Test rapide de connexion")
    
    choice = input("\nVotre choix (1-3): ").strip()
    
    if choice == "1":
        # Test complet
        test_scraper()
        
        # Proposer de cr√©er des donn√©es de d√©mo si le test √©choue
        create_demo = input("\nCr√©er des donn√©es de d√©monstration ? (o/n): ").strip().lower()
        if create_demo in ['o', 'oui', 'y', 'yes']:
            create_demo_data()
    
    elif choice == "2":
        # Cr√©er des donn√©es de d√©monstration
        create_demo_data()
    
    elif choice == "3":
        # Test rapide
        scraper = YupooSpecializedScraper()
        print(f"Test de connexion √†: {scraper.base_url}")
        
        try:
            soup = scraper.get_page(scraper.base_url)
            if soup:
                print("‚úÖ Connexion r√©ussie !")
            else:
                print("‚ùå Connexion √©chou√©e")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    
    else:
        print("‚ùå Choix invalide")
    
    print("\nüéØ Test termin√© !")
    print("üí° Pour lancer le scraper complet: python scripts/yupoo_scraper.py")

if __name__ == "__main__":
    main()
