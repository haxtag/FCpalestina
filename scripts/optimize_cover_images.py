#!/usr/bin/env python3
"""
Script pour optimiser la s√©lection des images de couverture
S√©lectionne les images qui montrent le maillot de face plut√¥t que les d√©tails
"""

import json
import os
import re
from pathlib import Path

def analyze_image_filename(filename):
    """
    Analyse le nom de fichier pour d√©terminer le type d'image
    Retourne un score (plus √©lev√© = meilleure image de couverture)
    """
    filename_lower = filename.lower()
    score = 0
    
    # Mots-cl√©s qui indiquent une vue compl√®te du maillot
    front_keywords = [
        'front', 'face', 'complet', 'full', 'entier', 'maillot', 'jersey'
    ]
    
    # Mots-cl√©s qui indiquent des d√©tails (√† √©viter)
    detail_keywords = [
        'blason', 'logo', 'crest', 'detail', 'close', 'proche', 'badge', 'sponsor'
    ]
    
    # Mots-cl√©s pour les vues sp√©cifiques
    view_keywords = {
        'front': 10,      # Vue de face
        'back': 8,        # Vue de dos
        'side': 6,        # Vue de c√¥t√©
        'main': 9,        # Image principale
        'hero': 10,       # Image h√©ro
        'cover': 10,      # Image de couverture
    }
    
    # Analyser les mots-cl√©s positifs
    for keyword in front_keywords:
        if keyword in filename_lower:
            score += 5
    
    # Analyser les vues sp√©cifiques
    for keyword, points in view_keywords.items():
        if keyword in filename_lower:
            score += points
    
    # Analyser les mots-cl√©s n√©gatifs (d√©tails)
    for keyword in detail_keywords:
        if keyword in filename_lower:
            score -= 8
    
    # Pr√©f√©rer les images avec des num√©ros plus bas (g√©n√©ralement les principales)
    number_match = re.search(r'(\d+)\.jpg$', filename)
    if number_match:
        number = int(number_match.group(1))
        if number == 0:
            score += 5  # Image 0 est souvent la principale
        elif number <= 2:
            score += 3  # Images 1-2 sont souvent bonnes
        else:
            score += 1  # Images 3+ sont souvent des d√©tails
    
    # Pr√©f√©rer les images plus grandes (indication de qualit√©)
    if 'hd' in filename_lower:
        score += 2
    
    return score

def select_best_cover_image(images):
    """
    S√©lectionne la meilleure image de couverture parmi une liste d'images
    """
    if not images:
        return None
    
    # Analyser toutes les images
    image_scores = []
    for image in images:
        score = analyze_image_filename(image)
        image_scores.append((image, score))
    
    # Trier par score (d√©croissant)
    image_scores.sort(key=lambda x: x[1], reverse=True)
    
    # Retourner la meilleure image
    best_image = image_scores[0][0]
    print(f"  Meilleure image s√©lectionn√©e: {best_image} (score: {image_scores[0][1]})")
    
    return best_image

def optimize_jerseys_cover_images():
    """
    Optimise les images de couverture pour tous les maillots
    """
    print("üîÑ Optimisation des images de couverture...")
    
    # Charger les donn√©es des maillots
    jerseys_file = Path("data/jerseys.json")
    if not jerseys_file.exists():
        print("‚ùå Fichier jerseys.json non trouv√©")
        return
    
    with open(jerseys_file, 'r', encoding='utf-8') as f:
        jerseys = json.load(f)
    
    print(f"üìä {len(jerseys)} maillots trouv√©s")
    
    updated_count = 0
    
    for jersey in jerseys:
        jersey_id = jersey.get('id', 'inconnu')
        current_thumbnail = jersey.get('thumbnail', '')
        images = jersey.get('images', [])
        
        print(f"\nüîç Maillot {jersey_id}:")
        print(f"  Image actuelle: {current_thumbnail}")
        print(f"  Images disponibles: {len(images)}")
        
        if not images:
            print("  ‚ö†Ô∏è Aucune image disponible")
            continue
        
        # S√©lectionner la meilleure image de couverture
        best_image = select_best_cover_image(images)
        
        if best_image and best_image != current_thumbnail:
            jersey['thumbnail'] = best_image
            updated_count += 1
            print(f"  ‚úÖ Mise √† jour: {current_thumbnail} ‚Üí {best_image}")
        else:
            print(f"  ‚úÖ D√©j√† optimis√©: {current_thumbnail}")
    
    # Sauvegarder les modifications
    with open(jerseys_file, 'w', encoding='utf-8') as f:
        json.dump(jerseys, f, ensure_ascii=False, indent=2)
    
    print(f"\nüéâ Optimisation termin√©e!")
    print(f"üìà {updated_count} maillots mis √† jour")
    print(f"üíæ Donn√©es sauvegard√©es dans {jerseys_file}")

def preview_optimization():
    """
    Aper√ßu de l'optimisation sans modification
    """
    print("üëÄ Aper√ßu de l'optimisation des images de couverture...")
    
    jerseys_file = Path("data/jerseys.json")
    if not jerseys_file.exists():
        print("‚ùå Fichier jerseys.json non trouv√©")
        return
    
    with open(jerseys_file, 'r', encoding='utf-8') as f:
        jerseys = json.load(f)
    
    print(f"üìä {len(jerseys)} maillots trouv√©s\n")
    
    for i, jersey in enumerate(jerseys[:5]):  # Afficher seulement les 5 premiers
        jersey_id = jersey.get('id', 'inconnu')
        current_thumbnail = jersey.get('thumbnail', '')
        images = jersey.get('images', [])
        
        print(f"üîç Maillot {jersey_id}:")
        print(f"  Image actuelle: {current_thumbnail}")
        
        if images:
            best_image = select_best_cover_image(images)
            if best_image != current_thumbnail:
                print(f"  üéØ Recommandation: {best_image}")
            else:
                print(f"  ‚úÖ D√©j√† optimal")
        else:
            print(f"  ‚ö†Ô∏è Aucune image disponible")
        print()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--preview":
        preview_optimization()
    else:
        optimize_jerseys_cover_images()
